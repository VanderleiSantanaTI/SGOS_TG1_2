{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.authService.isAuthenticated$.pipe(take(1), map(isAuthenticated => {\n      if (isAuthenticated) {\n        // Check if token is expired\n        if (this.authService.isTokenExpired()) {\n          this.authService.logout();\n          return this.router.createUrlTree(['/login']);\n        }\n        return true;\n      } else {\n        return this.router.createUrlTree(['/login']);\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthGuard };","map":{"version":3,"names":["map","take","AuthGuard","constructor","authService","router","canActivate","isAuthenticated$","pipe","isAuthenticated","isTokenExpired","logout","createUrlTree","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.authService.isAuthenticated$.pipe(\r\n      take(1),\r\n      map(isAuthenticated => {\r\n        if (isAuthenticated) {\r\n          // Check if token is expired\r\n          if (this.authService.isTokenExpired()) {\r\n            this.authService.logout();\r\n            return this.router.createUrlTree(['/login']);\r\n          }\r\n          return true;\r\n        } else {\r\n          return this.router.createUrlTree(['/login']);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAI1C,MAGaC,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,WAAW,CAACG,gBAAgB,CAACC,IAAI,CAC3CP,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACS,eAAe,IAAG;MACpB,IAAIA,eAAe,EAAE;QACnB;QACA,IAAI,IAAI,CAACL,WAAW,CAACM,cAAc,EAAE,EAAE;UACrC,IAAI,CAACN,WAAW,CAACO,MAAM,EAAE;UACzB,OAAO,IAAI,CAACN,MAAM,CAACO,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;QAE9C,OAAO,IAAI;OACZ,MAAM;QACL,OAAO,IAAI,CAACP,MAAM,CAACO,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEhD,CAAC,CAAC,CACH;EACH;;;uBAvBWV,SAAS,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAThB,SAAS;MAAAiB,OAAA,EAATjB,SAAS,CAAAkB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEPnB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}