{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route) {\n    const requiredRole = route.data['requiredRole'];\n    if (!requiredRole) {\n      return new Observable(observer => {\n        observer.next(true);\n        observer.complete();\n      });\n    }\n    return this.authService.currentUser$.pipe(take(1), map(user => {\n      if (!user) {\n        return this.router.createUrlTree(['/login']);\n      }\n      if (this.authService.hasPermission(requiredRole)) {\n        return true;\n      } else {\n        return this.router.createUrlTree(['/dashboard']);\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { RoleGuard };","map":{"version":3,"names":["Observable","map","take","RoleGuard","constructor","authService","router","canActivate","route","requiredRole","data","observer","next","complete","currentUser$","pipe","user","createUrlTree","hasPermission","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {\r\n    const requiredRole = route.data['requiredRole'];\r\n    \r\n    if (!requiredRole) {\r\n      return new Observable(observer => {\r\n        observer.next(true);\r\n        observer.complete();\r\n      });\r\n    }\r\n\r\n    return this.authService.currentUser$.pipe(\r\n      take(1),\r\n      map(user => {\r\n        if (!user) {\r\n          return this.router.createUrlTree(['/login']);\r\n        }\r\n\r\n        if (this.authService.hasPermission(requiredRole)) {\r\n          return true;\r\n        } else {\r\n          return this.router.createUrlTree(['/dashboard']);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAI1C,MAGaC,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAACC,KAA6B;IACvC,MAAMC,YAAY,GAAGD,KAAK,CAACE,IAAI,CAAC,cAAc,CAAC;IAE/C,IAAI,CAACD,YAAY,EAAE;MACjB,OAAO,IAAIT,UAAU,CAACW,QAAQ,IAAG;QAC/BA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;QACnBD,QAAQ,CAACE,QAAQ,EAAE;MACrB,CAAC,CAAC;;IAGJ,OAAO,IAAI,CAACR,WAAW,CAACS,YAAY,CAACC,IAAI,CACvCb,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACe,IAAI,IAAG;MACT,IAAI,CAACA,IAAI,EAAE;QACT,OAAO,IAAI,CAACV,MAAM,CAACW,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAG9C,IAAI,IAAI,CAACZ,WAAW,CAACa,aAAa,CAACT,YAAY,CAAC,EAAE;QAChD,OAAO,IAAI;OACZ,MAAM;QACL,OAAO,IAAI,CAACH,MAAM,CAACW,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC;;IAEpD,CAAC,CAAC,CACH;EACH;;;uBA/BWd,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATrB,SAAS;MAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEPxB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}