{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Teste/Documents/GitHub/SGOS_TG1_2/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ionic/angular\";\nclass ErrorInterceptor {\n  constructor(authService, router, toastController) {\n    this.authService = authService;\n    this.router = router;\n    this.toastController = toastController;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errorMessage = 'Erro desconhecido';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Erro: ${error.error.message}`;\n      } else {\n        // Server-side error\n        switch (error.status) {\n          case 400:\n            errorMessage = error.error?.message || 'Dados inválidos';\n            break;\n          case 401:\n            errorMessage = 'Sessão expirada. Faça login novamente.';\n            this.handleUnauthorized();\n            break;\n          case 403:\n            errorMessage = 'Acesso negado. Você não tem permissão para esta operação.';\n            break;\n          case 404:\n            errorMessage = 'Recurso não encontrado';\n            break;\n          case 422:\n            errorMessage = this.handleValidationError(error);\n            break;\n          case 429:\n            errorMessage = 'Muitas tentativas. Tente novamente em alguns minutos.';\n            break;\n          case 500:\n            errorMessage = 'Erro interno do servidor. Tente novamente mais tarde.';\n            break;\n          case 503:\n            errorMessage = 'Serviço temporariamente indisponível';\n            break;\n          default:\n            errorMessage = error.error?.message || `Erro ${error.status}: ${error.statusText}`;\n        }\n      }\n      // Show error toast for non-auth endpoints\n      if (error.status !== 401 && !request.url.includes('/auth/')) {\n        this.showErrorToast(errorMessage);\n      }\n      console.error('HTTP Error:', error);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  handleUnauthorized() {\n    // Logout user and redirect to login\n    this.authService.logout();\n  }\n  handleValidationError(error) {\n    if (error.error?.details && Array.isArray(error.error.details)) {\n      const messages = error.error.details.map(detail => detail.message);\n      return messages.join(', ');\n    }\n    return error.error?.message || 'Erro de validação';\n  }\n  showErrorToast(message) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this.toastController.create({\n        message: message,\n        duration: 4000,\n        position: 'top',\n        color: 'danger',\n        buttons: [{\n          text: 'Fechar',\n          role: 'cancel'\n        }]\n      });\n      yield toast.present();\n    })();\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastController));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}\nexport { ErrorInterceptor };","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","authService","router","toastController","intercept","request","next","handle","pipe","error","errorMessage","ErrorEvent","message","status","handleUnauthorized","handleValidationError","statusText","url","includes","showErrorToast","console","Error","logout","details","Array","isArray","messages","map","detail","join","_this","_asyncToGenerator","toast","create","duration","position","color","buttons","text","role","present","i0","ɵɵinject","i1","AuthService","i2","Router","i3","ToastController","factory","ɵfac"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { ToastController } from '@ionic/angular';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastController: ToastController\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = 'Erro desconhecido';\r\n\r\n        if (error.error instanceof ErrorEvent) {\r\n          // Client-side error\r\n          errorMessage = `Erro: ${error.error.message}`;\r\n        } else {\r\n          // Server-side error\r\n          switch (error.status) {\r\n            case 400:\r\n              errorMessage = error.error?.message || 'Dados inválidos';\r\n              break;\r\n            case 401:\r\n              errorMessage = 'Sessão expirada. Faça login novamente.';\r\n              this.handleUnauthorized();\r\n              break;\r\n            case 403:\r\n              errorMessage = 'Acesso negado. Você não tem permissão para esta operação.';\r\n              break;\r\n            case 404:\r\n              errorMessage = 'Recurso não encontrado';\r\n              break;\r\n            case 422:\r\n              errorMessage = this.handleValidationError(error);\r\n              break;\r\n            case 429:\r\n              errorMessage = 'Muitas tentativas. Tente novamente em alguns minutos.';\r\n              break;\r\n            case 500:\r\n              errorMessage = 'Erro interno do servidor. Tente novamente mais tarde.';\r\n              break;\r\n            case 503:\r\n              errorMessage = 'Serviço temporariamente indisponível';\r\n              break;\r\n            default:\r\n              errorMessage = error.error?.message || `Erro ${error.status}: ${error.statusText}`;\r\n          }\r\n        }\r\n\r\n        // Show error toast for non-auth endpoints\r\n        if (error.status !== 401 && !request.url.includes('/auth/')) {\r\n          this.showErrorToast(errorMessage);\r\n        }\r\n\r\n        console.error('HTTP Error:', error);\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleUnauthorized(): void {\r\n    // Logout user and redirect to login\r\n    this.authService.logout();\r\n  }\r\n\r\n  private handleValidationError(error: HttpErrorResponse): string {\r\n    if (error.error?.details && Array.isArray(error.error.details)) {\r\n      const messages = error.error.details.map((detail: any) => detail.message);\r\n      return messages.join(', ');\r\n    }\r\n    return error.error?.message || 'Erro de validação';\r\n  }\r\n\r\n  private async showErrorToast(message: string): Promise<void> {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 4000,\r\n      position: 'top',\r\n      color: 'danger',\r\n      buttons: [\r\n        {\r\n          text: 'Fechar',\r\n          role: 'cancel'\r\n        }\r\n      ]\r\n    });\r\n    await toast.present();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}