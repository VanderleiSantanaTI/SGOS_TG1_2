{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  /**\n   * GET request\n   */\n  get(endpoint, params) {\n    let httpParams = new HttpParams();\n    if (params) {\n      Object.keys(params).forEach(key => {\n        const value = params[key];\n        if (value !== undefined && value !== null) {\n          httpParams = httpParams.set(key, value.toString());\n        }\n      });\n    }\n    return this.http.get(`${this.baseUrl}${endpoint}`, {\n      params: httpParams\n    }).pipe(catchError(this.handleError));\n  }\n  /**\n   * POST request\n   */\n  post(endpoint, data) {\n    return this.http.post(`${this.baseUrl}${endpoint}`, data).pipe(catchError(this.handleError));\n  }\n  /**\n   * PUT request\n   */\n  put(endpoint, data) {\n    return this.http.put(`${this.baseUrl}${endpoint}`, data).pipe(catchError(this.handleError));\n  }\n  /**\n   * DELETE request\n   */\n  delete(endpoint) {\n    return this.http.delete(`${this.baseUrl}${endpoint}`).pipe(catchError(this.handleError));\n  }\n  /**\n   * GET request with pagination\n   */\n  getPaginated(endpoint, params) {\n    return this.get(endpoint, params);\n  }\n  /**\n   * Extract data from API response\n   */\n  extractData(response) {\n    return response.data;\n  }\n  /**\n   * Extract items from paginated response\n   */\n  extractItems(response) {\n    return response.data?.items || [];\n  }\n  /**\n   * Extract pagination info\n   */\n  extractPagination(response) {\n    // Suporta dois formatos:\n    // 1) data: { items: T[], pagination: { total, page, size, pages } }\n    // 2) data: { items: T[], total, page, size, pages }\n    const data = response?.data || {};\n    if (data.pagination) {\n      return data.pagination;\n    }\n    if (typeof data.total === 'number' && typeof data.page === 'number' && typeof data.size === 'number' && typeof data.pages === 'number') {\n      return {\n        total: data.total,\n        page: data.page,\n        size: data.size,\n        pages: data.pages\n      };\n    }\n    return {\n      total: 0,\n      page: 1,\n      size: 10,\n      pages: 0\n    };\n  }\n  /**\n   * Handle HTTP errors\n   */\n  handleError(error) {\n    let errorMessage = 'Erro desconhecido';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Erro: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.error?.message) {\n        errorMessage = error.error.message;\n      } else {\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Dados inválidos';\n            break;\n          case 401:\n            errorMessage = 'Não autorizado';\n            break;\n          case 403:\n            errorMessage = 'Acesso negado';\n            break;\n          case 404:\n            errorMessage = 'Recurso não encontrado';\n            break;\n          case 422:\n            errorMessage = 'Erro de validação';\n            break;\n          case 500:\n            errorMessage = 'Erro interno do servidor';\n            break;\n          default:\n            errorMessage = `Erro ${error.status}: ${error.message}`;\n        }\n      }\n    }\n    console.error('API Error:', error);\n    return throwError(() => new Error(errorMessage));\n  }\n  /**\n   * Build query string from params\n   */\n  buildQueryString(params) {\n    const queryParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      if (value !== undefined && value !== null) {\n        queryParams.set(key, value.toString());\n      }\n    });\n    return queryParams.toString();\n  }\n  /**\n   * Check if response is successful\n   */\n  isSuccessResponse(response) {\n    return response.success === true;\n  }\n  /**\n   * Get error message from response\n   */\n  getErrorMessage(error) {\n    if (error?.error?.message) {\n      return error.error.message;\n    }\n    if (error?.message) {\n      return error.message;\n    }\n    return 'Erro desconhecido';\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ApiService };","map":{"version":3,"names":["HttpParams","throwError","catchError","environment","ApiService","constructor","http","baseUrl","apiUrl","get","endpoint","params","httpParams","Object","keys","forEach","key","value","undefined","set","toString","pipe","handleError","post","data","put","delete","getPaginated","extractData","response","extractItems","items","extractPagination","pagination","total","page","size","pages","error","errorMessage","ErrorEvent","message","status","console","Error","buildQueryString","queryParams","URLSearchParams","isSuccessResponse","success","getErrorMessage","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { ApiResponse, PaginatedResponse, ErrorResponse } from '../models';\r\n\r\nexport interface QueryParams {\r\n  [key: string]: string | number | boolean | undefined;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private readonly baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * GET request\r\n   */\r\n  get<T>(endpoint: string, params?: QueryParams): Observable<T> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params) {\r\n      Object.keys(params).forEach(key => {\r\n        const value = params[key];\r\n        if (value !== undefined && value !== null) {\r\n          httpParams = httpParams.set(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http.get<T>(`${this.baseUrl}${endpoint}`, { params: httpParams })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * POST request\r\n   */\r\n  post<T>(endpoint: string, data: any): Observable<T> {\r\n    return this.http.post<T>(`${this.baseUrl}${endpoint}`, data)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * PUT request\r\n   */\r\n  put<T>(endpoint: string, data: any): Observable<T> {\r\n    return this.http.put<T>(`${this.baseUrl}${endpoint}`, data)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * DELETE request\r\n   */\r\n  delete<T>(endpoint: string): Observable<T> {\r\n    return this.http.delete<T>(`${this.baseUrl}${endpoint}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * GET request with pagination\r\n   */\r\n  getPaginated<T>(endpoint: string, params?: QueryParams): Observable<PaginatedResponse<T>> {\r\n    return this.get<PaginatedResponse<T>>(endpoint, params);\r\n  }\r\n\r\n  /**\r\n   * Extract data from API response\r\n   */\r\n  extractData<T>(response: ApiResponse<T>): T | undefined {\r\n    return response.data;\r\n  }\r\n\r\n  /**\r\n   * Extract items from paginated response\r\n   */\r\n  extractItems<T>(response: PaginatedResponse<T>): T[] {\r\n    return response.data?.items || [];\r\n  }\r\n\r\n  /**\r\n   * Extract pagination info\r\n   */\r\n  extractPagination<T>(response: PaginatedResponse<T>) {\r\n    // Suporta dois formatos:\r\n    // 1) data: { items: T[], pagination: { total, page, size, pages } }\r\n    // 2) data: { items: T[], total, page, size, pages }\r\n    const data: any = response?.data || {};\r\n    if (data.pagination) {\r\n      return data.pagination;\r\n    }\r\n    if (\r\n      typeof data.total === 'number' &&\r\n      typeof data.page === 'number' &&\r\n      typeof data.size === 'number' &&\r\n      typeof data.pages === 'number'\r\n    ) {\r\n      return {\r\n        total: data.total,\r\n        page: data.page,\r\n        size: data.size,\r\n        pages: data.pages\r\n      };\r\n    }\r\n    return { total: 0, page: 1, size: 10, pages: 0 };\r\n  }\r\n\r\n  /**\r\n   * Handle HTTP errors\r\n   */\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'Erro desconhecido';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Erro: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      if (error.error?.message) {\r\n        errorMessage = error.error.message;\r\n      } else {\r\n        switch (error.status) {\r\n          case 400:\r\n            errorMessage = 'Dados inválidos';\r\n            break;\r\n          case 401:\r\n            errorMessage = 'Não autorizado';\r\n            break;\r\n          case 403:\r\n            errorMessage = 'Acesso negado';\r\n            break;\r\n          case 404:\r\n            errorMessage = 'Recurso não encontrado';\r\n            break;\r\n          case 422:\r\n            errorMessage = 'Erro de validação';\r\n            break;\r\n          case 500:\r\n            errorMessage = 'Erro interno do servidor';\r\n            break;\r\n          default:\r\n            errorMessage = `Erro ${error.status}: ${error.message}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.error('API Error:', error);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * Build query string from params\r\n   */\r\n  private buildQueryString(params: QueryParams): string {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    Object.keys(params).forEach(key => {\r\n      const value = params[key];\r\n      if (value !== undefined && value !== null) {\r\n        queryParams.set(key, value.toString());\r\n      }\r\n    });\r\n\r\n    return queryParams.toString();\r\n  }\r\n\r\n  /**\r\n   * Check if response is successful\r\n   */\r\n  isSuccessResponse<T>(response: ApiResponse<T>): boolean {\r\n    return response.success === true;\r\n  }\r\n\r\n  /**\r\n   * Get error message from response\r\n   */\r\n  getErrorMessage(error: any): string {\r\n    if (error?.error?.message) {\r\n      return error.error.message;\r\n    }\r\n    if (error?.message) {\r\n      return error.message;\r\n    }\r\n    return 'Erro desconhecido';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}