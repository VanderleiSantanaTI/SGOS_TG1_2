{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nclass UsuarioService {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.endpoint = '/usuarios';\n  }\n  /**\n   * Get all users with pagination\n   */\n  getUsuarios(params) {\n    const queryParams = {\n      skip: params?.skip || 0,\n      limit: params?.limit || 10,\n      ...(params?.search && {\n        search: params.search\n      }),\n      ...(params?.perfil && {\n        perfil: params.perfil\n      }),\n      ...(params?.ativo !== undefined && {\n        ativo: params.ativo\n      })\n    };\n    return this.apiService.getPaginated(this.endpoint, queryParams);\n  }\n  /**\n   * Get user by ID\n   */\n  getUsuario(id) {\n    return this.apiService.get(`${this.endpoint}/${id}`).pipe(map(response => {\n      if (response.success && response.data) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Usuário não encontrado');\n    }));\n  }\n  /**\n   * Create new user\n   */\n  createUsuario(userData) {\n    return this.apiService.post(this.endpoint, userData).pipe(map(response => {\n      if (response.success && response.data) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Erro ao criar usuário');\n    }));\n  }\n  /**\n   * Update user\n   */\n  updateUsuario(id, userData) {\n    return this.apiService.put(`${this.endpoint}/${id}`, userData).pipe(map(response => {\n      if (response.success && response.data) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Erro ao atualizar usuário');\n    }));\n  }\n  /**\n   * Delete user\n   */\n  deleteUsuario(id) {\n    return this.apiService.delete(`${this.endpoint}/${id}`).pipe(map(response => {\n      if (response.success) {\n        return true;\n      }\n      throw new Error(response.message || 'Erro ao deletar usuário');\n    }));\n  }\n  /**\n   * Toggle user active status\n   */\n  toggleUsuarioStatus(id) {\n    return this.getUsuario(id).pipe(switchMap(usuario => {\n      const updateData = {\n        ativo: !usuario.ativo\n      };\n      return this.updateUsuario(id, updateData);\n    }));\n  }\n  /**\n   * Get users by role\n   */\n  getUsuariosByPerfil(perfil) {\n    return this.getUsuarios({\n      perfil,\n      limit: 1000\n    }).pipe(map(response => this.apiService.extractItems(response)));\n  }\n  /**\n   * Get active users only\n   */\n  getActiveUsuarios() {\n    return this.getUsuarios({\n      ativo: true,\n      limit: 1000\n    }).pipe(map(response => this.apiService.extractItems(response)));\n  }\n  /**\n   * Search users by name or username\n   */\n  searchUsuarios(searchTerm) {\n    return this.getUsuarios({\n      search: searchTerm,\n      limit: 100\n    }).pipe(map(response => this.apiService.extractItems(response)));\n  }\n  /**\n   * Get mechanics for assignment\n   */\n  getMecanicos() {\n    return this.getUsuariosByPerfil('MECANICO');\n  }\n  /**\n   * Get supervisors\n   */\n  getSupervisores() {\n    return this.getUsuariosByPerfil('SUPERVISOR');\n  }\n  /**\n   * Validate username availability\n   */\n  validateUsername(username, excludeId) {\n    return this.searchUsuarios(username).pipe(map(usuarios => {\n      const existingUser = usuarios.find(u => u.username.toLowerCase() === username.toLowerCase());\n      if (!existingUser) return true;\n      if (excludeId && existingUser.id === excludeId) return true;\n      return false;\n    }));\n  }\n  /**\n   * Validate email availability\n   */\n  validateEmail(email, excludeId) {\n    return this.searchUsuarios(email).pipe(map(usuarios => {\n      const existingUser = usuarios.find(u => u.email.toLowerCase() === email.toLowerCase());\n      if (!existingUser) return true;\n      if (excludeId && existingUser.id === excludeId) return true;\n      return false;\n    }));\n  }\n  /**\n   * Get user statistics\n   */\n  getUserStats() {\n    return this.getUsuarios({\n      limit: 1000\n    }).pipe(map(response => {\n      const usuarios = this.apiService.extractItems(response);\n      const total = usuarios.length;\n      const ativos = usuarios.filter(u => u.ativo).length;\n      const inativos = total - ativos;\n      const porPerfil = {};\n      usuarios.forEach(usuario => {\n        porPerfil[usuario.perfil] = (porPerfil[usuario.perfil] || 0) + 1;\n      });\n      return {\n        total,\n        ativos,\n        inativos,\n        porPerfil\n      };\n    }));\n  }\n  static {\n    this.ɵfac = function UsuarioService_Factory(t) {\n      return new (t || UsuarioService)(i0.ɵɵinject(i1.ApiService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsuarioService,\n      factory: UsuarioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { UsuarioService };","map":{"version":3,"names":["map","switchMap","UsuarioService","constructor","apiService","endpoint","getUsuarios","params","queryParams","skip","limit","search","perfil","ativo","undefined","getPaginated","getUsuario","id","get","pipe","response","success","data","Error","message","createUsuario","userData","post","updateUsuario","put","deleteUsuario","delete","toggleUsuarioStatus","usuario","updateData","getUsuariosByPerfil","extractItems","getActiveUsuarios","searchUsuarios","searchTerm","getMecanicos","getSupervisores","validateUsername","username","excludeId","usuarios","existingUser","find","u","toLowerCase","validateEmail","email","getUserStats","total","length","ativos","filter","inativos","porPerfil","forEach","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { ApiService, QueryParams } from './api.service';\r\nimport { \r\n  Usuario, \r\n  UsuarioCreate, \r\n  UsuarioUpdate, \r\n  ApiResponse, \r\n  PaginatedResponse \r\n} from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsuarioService {\r\n  private readonly endpoint = '/usuarios';\r\n\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  /**\r\n   * Get all users with pagination\r\n   */\r\n  getUsuarios(params?: {\r\n    skip?: number;\r\n    limit?: number;\r\n    search?: string;\r\n    perfil?: string;\r\n    ativo?: boolean;\r\n  }): Observable<PaginatedResponse<Usuario>> {\r\n    const queryParams: QueryParams = {\r\n      skip: params?.skip || 0,\r\n      limit: params?.limit || 10,\r\n      ...(params?.search && { search: params.search }),\r\n      ...(params?.perfil && { perfil: params.perfil }),\r\n      ...(params?.ativo !== undefined && { ativo: params.ativo })\r\n    };\r\n\r\n    return this.apiService.getPaginated<Usuario>(this.endpoint, queryParams);\r\n  }\r\n\r\n  /**\r\n   * Get user by ID\r\n   */\r\n  getUsuario(id: number): Observable<Usuario> {\r\n    return this.apiService.get<ApiResponse<Usuario>>(`${this.endpoint}/${id}`)\r\n      .pipe(\r\n        map(response => {\r\n          if (response.success && response.data) {\r\n            return response.data;\r\n          }\r\n          throw new Error(response.message || 'Usuário não encontrado');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Create new user\r\n   */\r\n  createUsuario(userData: UsuarioCreate): Observable<Usuario> {\r\n    return this.apiService.post<ApiResponse<Usuario>>(this.endpoint, userData)\r\n      .pipe(\r\n        map(response => {\r\n          if (response.success && response.data) {\r\n            return response.data;\r\n          }\r\n          throw new Error(response.message || 'Erro ao criar usuário');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Update user\r\n   */\r\n  updateUsuario(id: number, userData: UsuarioUpdate): Observable<Usuario> {\r\n    return this.apiService.put<ApiResponse<Usuario>>(`${this.endpoint}/${id}`, userData)\r\n      .pipe(\r\n        map(response => {\r\n          if (response.success && response.data) {\r\n            return response.data;\r\n          }\r\n          throw new Error(response.message || 'Erro ao atualizar usuário');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Delete user\r\n   */\r\n  deleteUsuario(id: number): Observable<boolean> {\r\n    return this.apiService.delete<ApiResponse>(`${this.endpoint}/${id}`)\r\n      .pipe(\r\n        map(response => {\r\n          if (response.success) {\r\n            return true;\r\n          }\r\n          throw new Error(response.message || 'Erro ao deletar usuário');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Toggle user active status\r\n   */\r\n  toggleUsuarioStatus(id: number): Observable<Usuario> {\r\n    return this.getUsuario(id).pipe(\r\n      switchMap(usuario => {\r\n        const updateData: UsuarioUpdate = {\r\n          ativo: !usuario.ativo\r\n        };\r\n        return this.updateUsuario(id, updateData);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get users by role\r\n   */\r\n  getUsuariosByPerfil(perfil: string): Observable<Usuario[]> {\r\n    return this.getUsuarios({ perfil, limit: 1000 })\r\n      .pipe(\r\n        map(response => this.apiService.extractItems(response))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get active users only\r\n   */\r\n  getActiveUsuarios(): Observable<Usuario[]> {\r\n    return this.getUsuarios({ ativo: true, limit: 1000 })\r\n      .pipe(\r\n        map(response => this.apiService.extractItems(response))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Search users by name or username\r\n   */\r\n  searchUsuarios(searchTerm: string): Observable<Usuario[]> {\r\n    return this.getUsuarios({ search: searchTerm, limit: 100 })\r\n      .pipe(\r\n        map(response => this.apiService.extractItems(response))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get mechanics for assignment\r\n   */\r\n  getMecanicos(): Observable<Usuario[]> {\r\n    return this.getUsuariosByPerfil('MECANICO');\r\n  }\r\n\r\n  /**\r\n   * Get supervisors\r\n   */\r\n  getSupervisores(): Observable<Usuario[]> {\r\n    return this.getUsuariosByPerfil('SUPERVISOR');\r\n  }\r\n\r\n  /**\r\n   * Validate username availability\r\n   */\r\n  validateUsername(username: string, excludeId?: number): Observable<boolean> {\r\n    return this.searchUsuarios(username)\r\n      .pipe(\r\n        map(usuarios => {\r\n          const existingUser = usuarios.find(u => \r\n            u.username.toLowerCase() === username.toLowerCase()\r\n          );\r\n          \r\n          if (!existingUser) return true;\r\n          if (excludeId && existingUser.id === excludeId) return true;\r\n          \r\n          return false;\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Validate email availability\r\n   */\r\n  validateEmail(email: string, excludeId?: number): Observable<boolean> {\r\n    return this.searchUsuarios(email)\r\n      .pipe(\r\n        map(usuarios => {\r\n          const existingUser = usuarios.find(u => \r\n            u.email.toLowerCase() === email.toLowerCase()\r\n          );\r\n          \r\n          if (!existingUser) return true;\r\n          if (excludeId && existingUser.id === excludeId) return true;\r\n          \r\n          return false;\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get user statistics\r\n   */\r\n  getUserStats(): Observable<{\r\n    total: number;\r\n    ativos: number;\r\n    inativos: number;\r\n    porPerfil: { [key: string]: number };\r\n  }> {\r\n    return this.getUsuarios({ limit: 1000 })\r\n      .pipe(\r\n        map(response => {\r\n          const usuarios = this.apiService.extractItems(response);\r\n          const total = usuarios.length;\r\n          const ativos = usuarios.filter(u => u.ativo).length;\r\n          const inativos = total - ativos;\r\n          \r\n          const porPerfil: { [key: string]: number } = {};\r\n          usuarios.forEach(usuario => {\r\n            porPerfil[usuario.perfil] = (porPerfil[usuario.perfil] || 0) + 1;\r\n          });\r\n\r\n          return { total, ativos, inativos, porPerfil };\r\n        })\r\n      );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}