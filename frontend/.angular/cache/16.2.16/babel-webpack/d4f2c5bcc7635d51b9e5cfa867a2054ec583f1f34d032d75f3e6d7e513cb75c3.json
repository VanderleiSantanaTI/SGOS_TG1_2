{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass AuthInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    // Get the auth token from localStorage\n    const authToken = localStorage.getItem('sgos_token');\n    // If we have a token, clone the request and add the authorization header\n    if (authToken) {\n      const authRequest = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\n      });\n      return next.handle(authRequest);\n    }\n    // If no token, proceed with the original request\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","intercept","request","next","authToken","localStorage","getItem","authRequest","clone","headers","set","handle","factory","ɵfac"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor() {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // Get the auth token from localStorage\r\n    const authToken = localStorage.getItem('sgos_token');\r\n\r\n    // If we have a token, clone the request and add the authorization header\r\n    if (authToken) {\r\n      const authRequest = request.clone({\r\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\r\n      });\r\n      return next.handle(authRequest);\r\n    }\r\n\r\n    // If no token, proceed with the original request\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";AAIA,MACaA,eAAe;EAE1BC,YAAA,GAAe;EAEfC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEpD;IACA,IAAIF,SAAS,EAAE;MACb,MAAMG,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC;QAChCC,OAAO,EAAEP,OAAO,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,SAAS,EAAE;OACpE,CAAC;MACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,WAAW,CAAC;;IAGjC;IACA,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC7B;;;uBAlBWH,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAa,OAAA,EAAfb,eAAe,CAAAc;IAAA;EAAA;;SAAfd,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}