{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Teste/Documents/GitHub/SGOS_TG1_2/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, of } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/storage-angular\";\nclass AuthService {\n  constructor(http, apiService, router, storage) {\n    this.http = http;\n    this.apiService = apiService;\n    this.router = router;\n    this.storage = storage;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.tokenSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.token$ = this.tokenSubject.asObservable();\n    this.TOKEN_KEY = 'sgos_token';\n    this.USER_KEY = 'sgos_user';\n    this.initStorage();\n  }\n  initStorage() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.storage.create();\n      yield _this.loadStoredAuth();\n    })();\n  }\n  /**\n   * Load authentication data from storage\n   */\n  loadStoredAuth() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const token = yield _this2.storage.get(_this2.TOKEN_KEY);\n        const userData = yield _this2.storage.get(_this2.USER_KEY);\n        if (token && userData) {\n          _this2.tokenSubject.next(token);\n          _this2.currentUserSubject.next(userData);\n          _this2.isAuthenticatedSubject.next(true);\n        }\n      } catch (error) {\n        console.error('Error loading stored auth:', error);\n      }\n    })();\n  }\n  /**\n   * Login user\n   */\n  login(credentials) {\n    var _this3 = this;\n    return this.apiService.post('/auth/login', credentials).pipe(tap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        if (response.success && response.data) {\n          const {\n            access_token,\n            user\n          } = response.data;\n          // Store in memory\n          _this3.tokenSubject.next(access_token);\n          _this3.currentUserSubject.next(user);\n          _this3.isAuthenticatedSubject.next(true);\n          // Store in persistent storage\n          yield _this3.storage.set(_this3.TOKEN_KEY, access_token);\n          yield _this3.storage.set(_this3.USER_KEY, user);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()), catchError(error => {\n      console.error('Login error:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Logout user\n   */\n  logout() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Clear memory\n        _this4.tokenSubject.next(null);\n        _this4.currentUserSubject.next(null);\n        _this4.isAuthenticatedSubject.next(false);\n        // Clear storage\n        yield _this4.storage.remove(_this4.TOKEN_KEY);\n        yield _this4.storage.remove(_this4.USER_KEY);\n        // Redirect to login\n        _this4.router.navigate(['/login']);\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    })();\n  }\n  /**\n   * Request password reset\n   */\n  requestPasswordReset(email) {\n    const request = {\n      email\n    };\n    return this.apiService.post('/auth/forgot-password', request);\n  }\n  /**\n   * Reset password with token\n   */\n  resetPassword(token, newPassword) {\n    const request = {\n      token,\n      new_password: newPassword\n    };\n    return this.apiService.post('/auth/reset-password', request);\n  }\n  /**\n   * Get current user\n   */\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  /**\n   * Get current token\n   */\n  getToken() {\n    return this.tokenSubject.value;\n  }\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.value;\n  }\n  /**\n   * Check if user has specific permission\n   */\n  hasPermission(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    const roleHierarchy = {\n      'ADMIN': 4,\n      'SUPERVISOR': 3,\n      'MECANICO': 2,\n      'USUARIO': 1\n    };\n    const userLevel = roleHierarchy[user.perfil] || 0;\n    const requiredLevel = roleHierarchy[requiredRole] || 0;\n    return userLevel >= requiredLevel;\n  }\n  /**\n   * Check if user is admin\n   */\n  isAdmin() {\n    return this.hasPermission('ADMIN');\n  }\n  /**\n   * Check if user is supervisor or above\n   */\n  isSupervisor() {\n    return this.hasPermission('SUPERVISOR');\n  }\n  /**\n   * Check if user is mechanic or above\n   */\n  isMechanic() {\n    return this.hasPermission('MECANICO');\n  }\n  /**\n   * Refresh user data\n   */\n  refreshUserData() {\n    const userId = this.getCurrentUser()?.id;\n    if (!userId) {\n      return of();\n    }\n    return this.apiService.get(`/usuarios/${userId}`).pipe(map(response => {\n      if (response.success && response.data) {\n        this.currentUserSubject.next(response.data);\n        this.storage.set(this.USER_KEY, response.data);\n        return response.data;\n      }\n      throw new Error('Failed to refresh user data');\n    }));\n  }\n  /**\n   * Update user profile\n   */\n  updateProfile(userData) {\n    var _this5 = this;\n    const userId = this.getCurrentUser()?.id;\n    if (!userId) {\n      throw new Error('No user logged in');\n    }\n    return this.apiService.put(`/usuarios/${userId}`, userData).pipe(tap( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        if (response.success && response.data) {\n          _this5.currentUserSubject.next(response.data);\n          yield _this5.storage.set(_this5.USER_KEY, response.data);\n        }\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()), map(response => {\n      if (response.success && response.data) {\n        return response.data;\n      }\n      throw new Error('Failed to update profile');\n    }));\n  }\n  /**\n   * Check token expiration\n   */\n  isTokenExpired() {\n    const token = this.getToken();\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const exp = payload.exp * 1000; // Convert to milliseconds\n      return Date.now() >= exp;\n    } catch (error) {\n      console.error('Error checking token expiration:', error);\n      return true;\n    }\n  }\n  /**\n   * Auto logout when token expires\n   */\n  checkTokenExpiration() {\n    if (this.isAuthenticated() && this.isTokenExpired()) {\n      this.logout();\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Storage));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","of","map","tap","catchError","AuthService","constructor","http","apiService","router","storage","currentUserSubject","isAuthenticatedSubject","tokenSubject","currentUser$","asObservable","isAuthenticated$","token$","TOKEN_KEY","USER_KEY","initStorage","_this","_asyncToGenerator","create","loadStoredAuth","_this2","token","get","userData","next","error","console","login","credentials","_this3","post","pipe","_ref","response","success","data","access_token","user","set","_x","apply","arguments","logout","_this4","remove","navigate","requestPasswordReset","email","request","resetPassword","newPassword","new_password","getCurrentUser","value","getToken","isAuthenticated","hasPermission","requiredRole","roleHierarchy","userLevel","perfil","requiredLevel","isAdmin","isSupervisor","isMechanic","refreshUserData","userId","id","Error","updateProfile","_this5","put","_ref2","_x2","isTokenExpired","payload","JSON","parse","atob","split","exp","Date","now","checkTokenExpiration","i0","ɵɵinject","i1","HttpClient","i2","ApiService","i3","Router","i4","Storage","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\nimport { ApiService } from './api.service';\r\nimport { \r\n  Usuario, \r\n  LoginRequest, \r\n  LoginResponse, \r\n  PasswordResetRequest, \r\n  ApiResponse \r\n} from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<Usuario | null>(null);\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  private tokenSubject = new BehaviorSubject<string | null>(null);\r\n\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n  public token$ = this.tokenSubject.asObservable();\r\n\r\n  private readonly TOKEN_KEY = 'sgos_token';\r\n  private readonly USER_KEY = 'sgos_user';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private apiService: ApiService,\r\n    private router: Router,\r\n    private storage: Storage\r\n  ) {\r\n    this.initStorage();\r\n  }\r\n\r\n  private async initStorage() {\r\n    await this.storage.create();\r\n    await this.loadStoredAuth();\r\n  }\r\n\r\n  /**\r\n   * Load authentication data from storage\r\n   */\r\n  private async loadStoredAuth() {\r\n    try {\r\n      const token = await this.storage.get(this.TOKEN_KEY);\r\n      const userData = await this.storage.get(this.USER_KEY);\r\n\r\n      if (token && userData) {\r\n        this.tokenSubject.next(token);\r\n        this.currentUserSubject.next(userData);\r\n        this.isAuthenticatedSubject.next(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading stored auth:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user\r\n   */\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    return this.apiService.post<LoginResponse>('/auth/login', credentials)\r\n      .pipe(\r\n        tap(async (response) => {\r\n          if (response.success && response.data) {\r\n            const { access_token, user } = response.data;\r\n            \r\n            // Store in memory\r\n            this.tokenSubject.next(access_token);\r\n            this.currentUserSubject.next(user);\r\n            this.isAuthenticatedSubject.next(true);\r\n            \r\n            // Store in persistent storage\r\n            await this.storage.set(this.TOKEN_KEY, access_token);\r\n            await this.storage.set(this.USER_KEY, user);\r\n          }\r\n        }),\r\n        catchError((error) => {\r\n          console.error('Login error:', error);\r\n          throw error;\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  async logout(): Promise<void> {\r\n    try {\r\n      // Clear memory\r\n      this.tokenSubject.next(null);\r\n      this.currentUserSubject.next(null);\r\n      this.isAuthenticatedSubject.next(false);\r\n      \r\n      // Clear storage\r\n      await this.storage.remove(this.TOKEN_KEY);\r\n      await this.storage.remove(this.USER_KEY);\r\n      \r\n      // Redirect to login\r\n      this.router.navigate(['/login']);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request password reset\r\n   */\r\n  requestPasswordReset(email: string): Observable<ApiResponse> {\r\n    const request: PasswordResetRequest = { email };\r\n    return this.apiService.post<ApiResponse>('/auth/forgot-password', request);\r\n  }\r\n\r\n  /**\r\n   * Reset password with token\r\n   */\r\n  resetPassword(token: string, newPassword: string): Observable<ApiResponse> {\r\n    const request = { token, new_password: newPassword };\r\n    return this.apiService.post<ApiResponse>('/auth/reset-password', request);\r\n  }\r\n\r\n  /**\r\n   * Get current user\r\n   */\r\n  getCurrentUser(): Usuario | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Get current token\r\n   */\r\n  getToken(): string | null {\r\n    return this.tokenSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Check if user has specific permission\r\n   */\r\n  hasPermission(requiredRole: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n\r\n    const roleHierarchy = {\r\n      'ADMIN': 4,\r\n      'SUPERVISOR': 3,\r\n      'MECANICO': 2,\r\n      'USUARIO': 1\r\n    };\r\n\r\n    const userLevel = roleHierarchy[user.perfil as keyof typeof roleHierarchy] || 0;\r\n    const requiredLevel = roleHierarchy[requiredRole as keyof typeof roleHierarchy] || 0;\r\n\r\n    return userLevel >= requiredLevel;\r\n  }\r\n\r\n  /**\r\n   * Check if user is admin\r\n   */\r\n  isAdmin(): boolean {\r\n    return this.hasPermission('ADMIN');\r\n  }\r\n\r\n  /**\r\n   * Check if user is supervisor or above\r\n   */\r\n  isSupervisor(): boolean {\r\n    return this.hasPermission('SUPERVISOR');\r\n  }\r\n\r\n  /**\r\n   * Check if user is mechanic or above\r\n   */\r\n  isMechanic(): boolean {\r\n    return this.hasPermission('MECANICO');\r\n  }\r\n\r\n  /**\r\n   * Refresh user data\r\n   */\r\n  refreshUserData(): Observable<Usuario> {\r\n    const userId = this.getCurrentUser()?.id;\r\n    if (!userId) {\r\n      return of();\r\n    }\r\n\r\n    return this.apiService.get<ApiResponse<Usuario>>(`/usuarios/${userId}`)\r\n      .pipe(\r\n        map(response => {\r\n          if (response.success && response.data) {\r\n            this.currentUserSubject.next(response.data);\r\n            this.storage.set(this.USER_KEY, response.data);\r\n            return response.data;\r\n          }\r\n          throw new Error('Failed to refresh user data');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   */\r\n  updateProfile(userData: Partial<Usuario>): Observable<Usuario> {\r\n    const userId = this.getCurrentUser()?.id;\r\n    if (!userId) {\r\n      throw new Error('No user logged in');\r\n    }\r\n\r\n    return this.apiService.put<ApiResponse<Usuario>>(`/usuarios/${userId}`, userData)\r\n      .pipe(\r\n        tap(async (response) => {\r\n          if (response.success && response.data) {\r\n            this.currentUserSubject.next(response.data);\r\n            await this.storage.set(this.USER_KEY, response.data);\r\n          }\r\n        }),\r\n        map(response => {\r\n          if (response.success && response.data) {\r\n            return response.data;\r\n          }\r\n          throw new Error('Failed to update profile');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Check token expiration\r\n   */\r\n  isTokenExpired(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) return true;\r\n\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const exp = payload.exp * 1000; // Convert to milliseconds\r\n      return Date.now() >= exp;\r\n    } catch (error) {\r\n      console.error('Error checking token expiration:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto logout when token expires\r\n   */\r\n  checkTokenExpiration() {\r\n    if (this.isAuthenticated() && this.isTokenExpired()) {\r\n      this.logout();\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}