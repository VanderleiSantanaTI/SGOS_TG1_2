{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nclass AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Get the auth token from the service\n    const authToken = this.authService.getToken();\n    // If we have a token, clone the request and add the authorization header\n    if (authToken) {\n      const authRequest = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\n      });\n      return next.handle(authRequest);\n    }\n    // If no token, proceed with the original request\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","authService","intercept","request","next","authToken","getToken","authRequest","clone","headers","set","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\Teste\\Documents\\GitHub\\SGOS_TG1_2\\frontend\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // Get the auth token from the service\r\n    const authToken = this.authService.getToken();\r\n\r\n    // If we have a token, clone the request and add the authorization header\r\n    if (authToken) {\r\n      const authRequest = request.clone({\r\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\r\n      });\r\n      return next.handle(authRequest);\r\n    }\r\n\r\n    // If no token, proceed with the original request\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";;AAMA,MACaA,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAE7C;IACA,IAAID,SAAS,EAAE;MACb,MAAME,WAAW,GAAGJ,OAAO,CAACK,KAAK,CAAC;QAChCC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,SAAS,EAAE;OACpE,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;;IAGjC;IACA,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;;uBAlBWJ,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAfhB,eAAe;MAAAiB,OAAA,EAAfjB,eAAe,CAAAkB;IAAA;EAAA;;SAAflB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}