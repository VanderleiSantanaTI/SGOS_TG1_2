{"ast":null,"code":"import * as i0 from \"@angular/core\";\nlet AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor() {}\n    intercept(request, next) {\n      // Get the auth token from localStorage\n      const authToken = localStorage.getItem('sgos_token');\n      console.log('üîê AuthInterceptor - URL:', request.url);\n      console.log('üîê AuthInterceptor - Token:', authToken ? 'Presente' : 'Ausente');\n      // If we have a token, clone the request and add the authorization header\n      if (authToken) {\n        const authRequest = request.clone({\n          headers: request.headers.set('Authorization', `Bearer ${authToken}`)\n        });\n        console.log('üîê AuthInterceptor - Headers adicionados:', authRequest.headers.get('Authorization'));\n        return next.handle(authRequest);\n      }\n      // If no token, proceed with the original request\n      console.log('üîê AuthInterceptor - Sem token, prosseguindo sem autentica√ß√£o');\n      return next.handle(request);\n    }\n    static {\n      this.…µfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)();\n      };\n    }\n    static {\n      this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.…µfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();\nexport { AuthInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}